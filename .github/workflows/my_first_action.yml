
name: my_first_action

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "."

jobs:

  build:
    name: Build
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |-
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                      echo "manager=yarn" >> $GITHUB_OUTPUT
                      echo "command=install" >> $GITHUB_OUTPUT
                      echo "runner=yarn" >> $GITHUB_OUTPUT
                      echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
                      exit 0
                    elif [ -f "${{ github.workspace }}/package.json" ]; then
                      echo "manager=npm" >> $GITHUB_OUTPUT
                      echo "command=ci" >> $GITHUB_OUTPUT
                      echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                      echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
                      exit 0
                    else
                      echo "Unable to determine package manager"
                      exit 1
                    fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |-
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
                          --site "${{ steps.pages.outputs.origin }}" \
                          --base ${{ steps.pages.outputs.base_path }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


  notify-trello:
    runs-on: ubuntu-latest
    steps:
      - name: Notify Trello
        run: |
          curl -v -X POST \
            "https://api.trello.com/1/cards" \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_SECRET }}" \
            -d "idList=678f791610bf79bb453bf6a5" \
            -d "name=Déploiement effectué sur main" \
            -d "desc=Le déploiement a été réalisé avec succès !" \
            -d "pos=top" 

  google_notification:
    needs:
      - build
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Notify Google Chat
        if: ${{ always() }}
        uses: SimonScholz/google-chat-action@main
        with:
          webhookUrl: ${{ secrets.GOOGLE_CHAT_URL }}
          title: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' && 'D�ployement effectu� avec succ�s !' || 'Il y � eu un probl�me lors du deployement' }}
          subtitle: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' && 'Bravo !' || 'Oups !' }}
          additionalSections: "\n            [\n              {\n                \"header\": \"Details de la fusion\",\n                \"collapsible\": true,\n                \"widgets\": [\n                  { \"decoratedText\": { \"text\": \"- Titre du commit  : ${{ github.event.commits[0].message }}\" } },\n                  { \"decoratedText\": { \"text\": \"- Auteur : ${{ github.event.commits[1].author.username }}\" } }\n                ]\n              },\n              {\n                \"header\": \"Resultats des jobs\",\n                \"collapsible\": true,\n                \"widgets\": [\n                  { \"decoratedText\": { \"text\": \"- Build : ${{ needs.build.result }}\" } },\n                  { \"decoratedText\": { \"text\": \"- Deployment : ${{ needs.deploy.result }}\" } }\n                ]\n              }\n            ]\n    "
